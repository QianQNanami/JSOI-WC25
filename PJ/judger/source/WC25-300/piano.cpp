/*
弹奏（piano）
【题目描述】
牛牛的钢琴有 52 个键位，他有一双超级大手，每个手都可以弹到 9 个连续的键位。
具体的，如果一只手位于键位 p，则这只手可以按下 p - 4, p - 3, ・ ・ ・ , p + 3, p + 4 这 9 个键位。
牛牛的手不能超过钢琴的边界，即 5 ≤ p ≤ 48 。
作为艺术家,牛牛会使用他的两只手一起弹琴。为了弹奏出美妙的歌曲，对于一首长为 T 秒的曲子，
牛牛在第 i 秒有 Xi 个键要按，他的两只手必须能够覆盖此时需要按的所有键位的范围。
为了弹奏这首曲子，牛牛可以在每一秒最开始移动双手。对于一只手，若移动键位数为 D，
根据动能定理，消耗的体力就为 D2 。
牛牛初始可以将双手放到钢琴任意位置上，当然这个也要消耗 1 的体力。
现在牛牛想知道，对于给定的一首曲子，弹奏它所需消耗的体力的最小值。
【输入格式】
输入数据共 T + 1 行。
第 1 行 1 个整数 T，表示钢琴演奏时间。
第 2 ～ T + 1 行，第 i + 1 行共 Xi + 1 个整数。其中第 i + 1 行第 1 个整数为 Xi，
表示第 i 秒需要演奏的键位总数。接下来的 Xi 个整数，表示这些需要演奏的键位。
【输出格式】
输出共 1 行 1 个整数，表示最小体力消耗。如果无法完成演奏，则输出 -1。
【样例 1 输入】
3
7 1 2 3 4 5 6 7
7 4 5 6 7 8 9 10
7 40 41 42 43 44 45 46
【样例 1 输出】
1 2
【样例 1 解释】
牛牛可以最开始把左手放在键位 5，右手放在键位 43，这需要消耗 1 点体力。接下
来在第 2 秒最开始把左手移动到键位 6 ，这需要消耗 pow(6 - 5)= 1 点体力。
这样，在第 1 秒，牛牛的双手可以覆盖键位 1, 2, 3, 4, 5, 6, 7, 8, 9, 39, 40, 41, 42, 43, 44,
45, 46, 47；在第 2 和第 3 秒，牛牛的双手可以覆盖键位 2, 3, 4, 5, 6, 7, 8, 9, 10, 39, 40, 41, 42,
43, 44, 45, 46, 47。
【子任务】
对于所有测试数据，保证 1 ≤ T ≤ 1000，0 ≤ Xi ≤ 18，所有的键位均为正整数且≤ 52。
【提示】
注意，一秒内一个键可以按下不止一次。*/
#include <bits/stdc++.h>
using namespace std;

int t;
int a[1001][19];
set<int> st;

int main(){
	//看不懂怎么写 
	
	freopen("piano.in","r",stdin);
	freopen("piano.out","w",stdout);
	
	cin>>t;
	int k;
	for(int i=1;i<=t;i++){
		cin>>k;
		for(int j=1;j<=k;j++){
			cin>>a[i][j];
		}
	}
	
	for(int i=1;i<=t;i++){
		for(int j=1;j<=k;j++)
			set.insert(a[i][j]);
		
	}
	cout<<"0"<<endl;
	return 0;
	//不会了，编译出错 
}
